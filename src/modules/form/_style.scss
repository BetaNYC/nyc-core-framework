/*

In this file:

// A. Modules
// B. Variables
// C. Selector Resets
// D. Form Entry Block
// E. Form Entry Elements
// F. Form Entry Modifiers
// G. Browser Behavior Modifications
// H. Form Entry within Nav
// I. Form Feedback and Alerts

*/

//////////////////////////////////////////////
// A. Modules
//////////////////////////////////////////////

@use "sass:map";
@use "../breakpoint/style" as breakpoint;
@use "../caret/style" as caret;
@use "../icon/style" as icon;

//////////////////////////////////////////////
// B. Variables
//////////////////////////////////////////////

// Scoped to Block

%custom-properties {

    --form-field-padding-x: var(--spacer-3);
    --form-field-padding-y: var(--button-padding-y);

    --form-field-border-radius: 0.25em;
}

//////////////////////////////////////////////
// C. Selector Resets
//////////////////////////////////////////////

label, .label,
input[type="text"],
input[type="email"],
input[type="password"],
input[type="search"],
select,
textarea {
    display: block;
    width: 100%;
    max-width: 100%;
    font-size: inherit;
}

select {
    border-radius: unset;
    -moz-appearance: unset;
    -webkit-appearance: unset;
    appearance: unset;
    
    // Hide select default icon on IE
    &::-ms-expand {
        display: none;
    }
}

input {
    margin: unset;
    padding: unset;

    &::-ms-clear {
        display: none;
        height: 0;
        width: 0;
    }
}

textarea {
    resize: vertical;
    overflow: auto;
    vertical-align: top;
}

// Remove FireFox specific 'inner-focus' styles
button::-moz-focus-inner {
    border-style: none;
    padding: 0;
}

legend {
    width: 100%;
    float: left;
    margin: 0;
    padding: 0;

    + * {
        clear: both;
    }
    
    // Correct color inheritance in IE
    color: inherit;
    display: table;

    // Correct the text wrapping in Edge and IE
    line-height: normal;
    max-width: 100%;
    white-space: normal;
}

fieldset {
    display: table-cell;
    border: 0;
    padding: 0.01em 0 0 0;
    margin: 0;
    min-width: 0;
}

//////////////////////////////////////////////
// C. Form Entry Block
//////////////////////////////////////////////

.form-entry {
    @extend %custom-properties;

    position: relative;

    select,
    textarea,
    input:not([type="radio"]):not([type="checkbox"]):not([type="file"]):not([type="range"]) {
        background-color: transparent;
        color: inherit;
        border-radius: inherit;
        border: 0;
        width: 100%;
    }

    button,
    fieldset {
        border: unset;
    }

    select option {
        color: currentColor !important;
    }

    ::placeholder {
        color: currentColor;
        opacity: 0.675;
    }

    [dir="rtl"] & {
        text-align: right;
    }

    &[data-required]{
        background-color: rgba(yellow, 0.25);
    }
}

form > .form-entry ~ .form-entry,
form > .grid, 
form > .button {
    margin-top: var(--spacer-4);
    margin-bottom: var(--spacer-4);
}

//////////////////////////////////////////////
// D. Form Entry Elements
//////////////////////////////////////////////

.form-entry__field {

    position: relative;

    display: flex;
    flex-direction: column;

    color: inherit;
}

.form-entry__field__label {
    display: block;
    font-weight: var(--body-font-weight-bold);
    margin-bottom: 0.5em;

    padding-left: var(--form-field-padding-x);
    padding-right: var(--form-field-padding-x);

    &::after {
        content: "*";
        margin: auto 0.25rem;
        display: none;
        font-size: 80%;
    }
}

// Required Asterisk

[data-required="true"] .form-entry__field__label::after {
    display: inline-block !important;
}

.form-entry__field__input {
    position: relative;
    
    display: flex;
    align-items: center;

    border-radius: var(--form-field-border-radius);
    overflow: hidden;
    
    input,
    select, 
    textarea
    {
        padding: var(--form-field-padding-y) var(--form-field-padding-x);
        outline: none;
    }

    button {
        flex-shrink: 0;
    }

    .button--icon-only {
        border-radius: inherit;
        font-size: 80%;
    }

    > [class*="button--icon-only"] {
        margin-left: calc(var(--form-field-padding-x) / 2);
        margin-right: calc(var(--form-field-padding-x) / 2);
    }
    
    > [class*="nyc_icon"] {
        font-size: 75%;
        margin-left: var(--form-field-padding-x);
    }

    &::after {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;

        border-radius: inherit;
        pointer-events: none;
        
        box-shadow: inset 0 0 0 var(--default-border-width) currentColor;
    }

    [dir="rtl"] & {
        > [class*="nyc_icon"] {
            margin-left: unset;
            margin-right: var(--form-field-padding-x);
        }
    }

    
}

[class*="primary-nav"] .form-entry__field__input::after {
    display: none;
}

.active .form-entry__field__input::after {
    box-shadow: inset 0 0 0 calc( var(--default-border-width) * 3) currentColor;
}

.form-entry__help {
    font-size: 0.8em;
    padding-left: var(--form-field-padding-x);
    padding-right: var(--form-field-padding-x);
    margin-top: var(--spacer-2);
}

.form-entry__field__input.select {
    position: relative;

    &::before {
        content: "";
        @include caret.caret-icon;
        pointer-events: none;
        position: absolute;
        right: 0;
        top: 50%;
        transform: translateY(-50%);
        margin-left: var(--form-field-padding-x);
        margin-right: var(--form-field-padding-x);
    }

}

.form-entry__field__input.select::before {
    [dir="rtl"] & {
        right: unset;
        left: 0;
    }
}

//////////////////////////////////////////////
// E. Form Feedback and Alerts
//////////////////////////////////////////////

[data-alert="form-errors"],
.form-entry__feedback,
.form-entry__field__input span.nyc_icon_warn
{
    display: none;
}

.form-entry__feedback {
    order: 3;
    margin-top: 0.5rem;
    font-size: 80%;
    padding-left: var(--form-field-padding-x);
    padding-right: var(--form-field-padding-x);
}

.is-invalid {
    .form-entry__feedback,
    .form-entry__field__input .nyc_icon_warn
    {
        display: block;
    }
}

//////////////////////////////////////////////
// F. Checkbox and Radio Elements
//////////////////////////////////////////////

.form-entry__options {
    --gap-size: 0.5em;

    clear: both;
    
    display: flex;
    flex-direction: column;
}

.form-entry__options:not([class*="--divider"]){

    > div:not(:last-child) {
        margin-bottom: var(--gap-size);
    }
}

.form-entry__options.options--divider {

    border-radius: var(--form-field-border-radius);

    > div {
        padding: 0.5em var(--spacer-2);
        position: relative;
    }

    > div:not(:last-child) {
        border-bottom-width: var(--default-border-width);
        border-bottom-style: var(--default-border-style);
        border-bottom-color: inherit;
    }

    > div > label {

        &::before {
            top: calc(0.75em * -1);
            left: calc(var(--spacer-2) * -1);
            bottom: calc(0.75em * -1);
            right: calc(var(--spacer-2) * -1);

            pointer-events: inherit;
        }
    }
}

@each $breakpoint in map.keys(breakpoint.$breakpoints) {
    @include breakpoint.breakpoints-up($breakpoint) {
        $mod: breakpoint.breakpoint-modifier($breakpoint, breakpoint.$breakpoints);
        
        .form-entry__options:not([class*="--divider"]).options--horizontal#{$mod} {
            flex-direction: row;

            --gap-size: 1.5em;

            margin-left: calc(-1 * var(--gap-size));
            margin-right: calc(-1 * var(--gap-size));

            > div {
                margin-bottom: unset;
                margin-left: var(--gap-size);
                margin-right: var(--gap-size);
            }

        }

        .options--divider.options--horizontal#{$mod}{
            flex-direction: row;
            align-items: stretch;

            > div {
                flex: 1;
                border-bottom-style: none !important; // Thanks, IE.
            }

            > div:not(:last-child){
                border-right-width: var(--default-border-width);
                border-right-style: var(--default-border-style);

                [dir="rtl"] & {
                    border-right-width: 0;
                    border-left-width: var(--default-border-width);
                    border-left-style: var(--default-border-style);
                }
            }
        }

    }
}

// Shared Styles

.form-entry__options__radio,
.form-entry__options__check {
    position: relative;
    color: inherit;
    display: flex;
    align-items: baseline;
    padding-left: 1em;
    width: auto;
    cursor: pointer;

    [dir="rtl"] & {
        padding-left: unset;
        padding-right: 1em;
    }
}

.form-entry__options__radio > input[type="radio"],
.form-entry__options__check > input[type="checkbox"] {
    background-color: transparent;
    opacity: 0;
} 

.form-entry__options__radio > input ~ .radio__label,
.form-entry__options__check > input ~ .checkbox__label {
    line-height: var(--body-line-height);

    &::before {
        position: absolute;
        top: 0;
        left: 0;
        opacity: 0.5;

        font-size: 125%;
        margin-top: -0.125em;

        @extend .nyc_icon_font;
    }
}

// Unchecked and Checked States

.form-entry__options__check > input ~ .checkbox__label::before {
    content: "\e946";
}

.form-entry__options__check > input:checked ~ .checkbox__label::before {
    content: "\e947";
}

.form-entry__options__radio > input ~ .radio__label::before{
    content: "\e948";
}

.form-entry__options__radio > input:checked ~ .radio__label::before{
    content: "\e949";
}

// Focus State

.form-entry__options__radio > input:focus ~ .radio__label,
.form-entry__options__check > input:focus ~ .checkbox__label {
    text-decoration: underline;
    &::before{
        opacity: 0.75;
    }
}

.form-entry__options__radio > input:checked ~ .radio__label,
.form-entry__options__check > input:checked ~ .checkbox__label {
    &::before{
        opacity: 1;
    }
}

// RTL

[dir="rtl"] {
    .form-entry__options__radio > .radio__label::before,
    .form-entry__options__radio > input[type="radio"],

    .form-entry__options__check > .checkbox__label::before,
    .form-entry__options__check > .checkbox__label::after,
    .form-entry__options__check > input[type="checkbox"] {
        left: unset;
        right: 0;
    }
}